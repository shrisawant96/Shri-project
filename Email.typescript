import axios from 'axios';

interface EmailProvider {
    sendEmail(email: string, subject: string, body: string): Promise<void>;
}

class MockEmailProvider1 implements EmailProvider {
    async sendEmail(email: string, subject: string, body: string): Promise<void> {
        // Simulate network request
        return new Promise((resolve, reject) => setTimeout(() => Math.random() > 0.5 ? resolve() : reject(new Error('Provider 1 failed')), 1000));
    }
}

class MockEmailProvider2 implements EmailProvider {
    async sendEmail(email: string, subject: string, body: string): Promise<void> {
        // Simulate network request
        return new Promise((resolve, reject) => setTimeout(() => Math.random() > 0.5 ? resolve() : reject(new Error('Provider 2 failed')), 1000));
    }
}

class EmailService {
    private providers: EmailProvider[] = [new MockEmailProvider1(), new MockEmailProvider2()];
    private retryCount: number = 3;
    private retryDelay: number = 1000; // Initial delay in ms
    private sentEmails: Set<string> = new Set();
    
    async sendEmail(email: string, subject: string, body: string): Promise<void> {
        if (this.sentEmails.has(email)) {
            console.log('Email already sent. Skipping.');
            return;
        }

        let providerIndex = 0;
        let attempts = 0;

        while (attempts < this.retryCount && providerIndex < this.providers.length) {
            try {
                await this.providers[providerIndex].sendEmail(email, subject, body);
                console.log('Email sent successfully.');
                this.sentEmails.add(email);
                return;
            } catch (error) {
                console.log(`Attempt ${attempts + 1} failed with provider ${providerIndex + 1}. Error: ${error.message}`);
                attempts++;
                providerIndex = (providerIndex + 1) % this.providers.length;
                if (attempts < this.retryCount) {
                    await new Promise(res => setTimeout(res, this.retryDelay * Math.pow(2, attempts)));
                }
            }
        }

        throw new Error('Failed to send email after multiple attempts.');
    }
}

export { EmailService };
